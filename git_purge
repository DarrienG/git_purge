#!/usr/bin/env bash

YES="y"
NO="n"
VERSION="RC2.2.1"
BC_CHOICE="1"
HP_CHOICE="2"
SC_CHOICE="3"
UE_CHOICE="4"
IS_CHOICE="5"
QUIT="q"
SSH_DIR=~/.ssh/git*
SIMPLE=simple
MATCHING=matching
# File name to search in option 5. Default set to DarrienG
FILENAME=DarrienG

# Take input from user at beginning of clean type
# Lets user decide if they want to follow through with cleans
beginput ()
{
	read INPUT
	if [[ "$INPUT" ==  "$NO" ]]; then
		echo Clean terminated
		exit
	fi	
}

# Take input from user after each clean
# Allows early termination of script if clean worked
endput ()
{
	echo "Operation completed."
	echo "Did it work? y/n"
	printf "> "
	read INPUT
	if [[ "$INPUT" == "$YES" ]]; then
		echo Clean finished
		exit
	fi	
}

# Locate .gitconfig 
# Likely in ~/.gitconfig, but this way we cover all bases
find_config () 
{
	PATHNAME=$(find ~/ -type f -iname .gitconfig)

	SIZE=${#PATHNAME}

	if [[ "$SIZE" -le 0 ]]; then
		printf "Unable to locate gitconfig file. Cannot continue with operation.\n"
	else
		printf ".gitconfig found in: %s\n" "$PATHNAME"
		echo "Destroying and recreating file..."
		rm $PATHNAME; touch ~/.gitconfig
	fi
}


basic_clean () 
{
	printf "\n____Basic Commands____\n"
	printf "Use basic commands built into git to clean config file, and destroy\npassword cache\n\n"

	echo "Begin clean? y/n"
	printf "> "

	beginput

	echo "Unsetting global vars..."
	git config --global --unset-all user.name
	git config --global --unset-all user.email 

	echo "Unsetting password cache..."
	git config --global --unset credential.helper	
	endput
}

heavy_purge () 
{
	printf "\n____Heavy Purge____\n"

	printf "Destroy and recreate all instances of config file \n\n"

	echo "Do you want to continue? y/n"
	printf "> "

	beginput
	find_config
	endput	
}

ssh_clean () 
{
	printf "\n____Auto SSH Purge____\n\n"
	printf "Automatically finds git related SSH keys, and destroys them.\n\n"
	printf "Because of the somewhat guessy nature of this portion, it's in your\n"
	printf "best interests to do this part manually. \n"

	printf "\nTo manually run this step, run these commands: \n\n"
	printf "> cd ~/.ssh\n"
	printf "> rm [SSH KEYS CREATED FOR GIT]\n\n"

	echo "Do you want to autorun this part of the clean? y/n"
	printf "> "

	read INPUT
	if [[ "$INPUT" == "$NO" ]]; then
		printf "Skipping autoclean; Please manually clean folder. \n"
	else
		# SSH_DIR refuses to link when input here, has to be hardcoded in
		SIZE=$(ls -1 $SSH_DIR | wc -l)
		if [[ "$SIZE" -gt 0 ]]; then
			rm "$SSH_DIR"
		else
			printf "Cannot automatically find any git related SSH files. Please check manually.\n"
		fi
	fi	

	endput
}

set_credentials () 
{
	printf "\n____Set Credentials____\n\n"
	printf "Set global credentials for user.name and user.email\n"
	printf "Makes it easier to reset global fields with less typing\n\n"

	printf "Do you want to input your credentials? y/n\n> "
	beginput

	printf "Please enter the user.name you would like to be set as the global\n"
	printf "user.name\n> "
	read USER_INPUT

	git config --global user.name "$USER_INPUT"

	printf "Please enter the user.email you would like to be set as the global\n"
	printf "user.email\n> "
	read USER_INPUT

	git config --global user.email "$USER_INPUT"

	until [[ "$BRANCH_INPUT" == "$SIMPLE" || "$BRANCH_INPUT" == "$MATCHING" ]]; do
		printf "Would you like to set the default branching behavior as matching\n"
		printf "or simple?\n"
		printf "Simple is the recommended option. simple/matching\n> "
		read BRANCH_INPUT
		if [[ "$BRANCH_INPUT" == "$SIMPLE" || "$BRANCH_INPUT" == "$MATCHING" ]]; then
			git config --global push.default "$BRANCH_INPUT"
		else
			printf "\n\nPlease enter a valid choice\n\n"
		fi
	done

	printf "\nNew global git settings: \n\n"
	git config --global --list
}

intensive_search () 
{
	printf "\n____Intensive Search____\n\n"
	printf "Fires off an intensive search of the user's HOME directory for\n"
	printf "all files and files with a certain term in them. Results are \n"
	printf "dumped in a file 'i_search.txt'\n\n"
	printf "This is a fairly resource intensive operation, and the amount of\n"
	printf "of time it takes is dependent upon how many files are are in your\n"
	printf "HOME directory.\n"
	printf "\nIt is in your best interests to connect your device to a charger\n"
	printf "if it is a mobile device.\n\n"

	printf "Do you want to continue with this operation? y/n\n> "
	beginput

	until [[ "$SEARCH_INPUT" == "1" || "$SEARCH_INPUT" == "2" || "$SEARCH_INPUT" == "$QUIT" ]]; do
		printf "\nThere are three options for search, grep, find, and locate.\n"
		printf "[1] 'grep' is far reaching, but very resource intensive\n"
		printf "[2] 'locate' is the incredibly fast, but less accurate, and\n"
		printf "not as far reaching.*"

		printf "\n*To increase 'locate' accuracy, open up another terminal,\n"
		printf "and run the command 'sudo updatedb'\n> "

		read SEARCH_INPUT

		if [[ "$SEARCH_INPUT" == "1" ]]; then
			printf "____GREP: ALL INSTANCES OF %s____" "$FILENAME" > i_search.txt
			grep -r "$FILENAME" ~/ >> i_search.txt
			echo "____FIND: ALL INSTANCES OF GITCONFIG____" >> i_search.txt
			find ~/ -type f -iname .gitconfig >> i_search.txt
		elif [[ "$SEARCH_INPUT" == "2" ]]; then
			printf "____LOCATE: ALL INSTANCES OF %s____" "$FILENAME" > i_search.txt
			locate ~/ -A "$FILENAME" >> i_search.txt
			echo "____LOCATE: ALL INSTANCES OF GITCONFIG____" >> i_search.txt
			locate ~/ -A .gitconfig >> i_search.txt
		elif [[ "$SEARCH_INPUT" == "$QUIT" ]]; then
			printf "No search conducted. Returning to main menu.\n"
		fi
	done
	SEARCH_INPUT=null

}

printf "\n\nGit cleaning scipt %s - Darrien Glasser\n" "$VERSION"

until [[ "$MENU_INPUT" == "$QUIT" ]]; do
	echo -e "\n[1] Basic clean"
	echo "[2] Heavy purge"
	echo "[3] SSH clean"
	echo "[4] Set credentials"
	echo "[5] Intensive search"
	echo "[q] Quit"
	printf "> "
	read MENU_INPUT
	if [[ "$MENU_INPUT" == "$BC_CHOICE" ]]; then
		basic_clean
	elif [[ "$MENU_INPUT" == "$HP_CHOICE" ]]; then
		heavy_purge
	elif [[ "$MENU_INPUT" == "$SC_CHOICE" ]]; then
		ssh_clean
	elif [[ "$MENU_INPUT" == "$UE_CHOICE" ]]; then
		set_credentials
	elif [[ "$MENU_INPUT" == "$IS_CHOICE" ]]; then
		intensive_search
	elif [[ "$MENU_INPUT" == "$QUIT" ]]; then
		echo "Script end"
		exit
	fi
done

exit
